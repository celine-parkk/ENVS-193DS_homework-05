---
title: "Homework 5"
author: "Celine Park"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    theme: yeti
editor: visual
execute: 
  message: false
  warning: false
---

```{r libraries}
library(tidyverse)
library(here)
library(janitor)
library(ggeffects)
library(performance)
library(naniar) # or equivalent
library(flextable) # or equivalent
library(car)
library(broom)
# would be nice to have

library(corrplot)
library(AICcmodavg)
library(GGally)
```

```{r reading-data}
plant <- read_csv(here("data", "knb-lter-hfr.109.18", "hf109-01-sarracenia.csv")) |>
  #make the column names cleaner
  clean_names() |>
  #selecting the columns of interest
  select(totmass, species, feedlevel, sla, chlorophyll, amass, num_lvs, num_phylls)
  
```

Visualize missing data

```{r missing-data-visualization}
gg_miss_var(plant)
```

Subsetting the data by dropping NAs:

```{r subset-drop-NA}
plant_subset <- plant |>
  drop_na(sla, chlorophyll, amass, num_lvs, num_phylls)

```

Create a correlation plot:

(example writing) To determine the relationships between numerical variables in our dataset we calculated Pearsons r and visually represented correlation using a correlation plot.

```{r correlation-plot}
# calculate Pearson's r for numerical values only

plant_car <- plant_subset |>
  select(feedlevel:num_phylls) |>
  cor(method = "pearson")

#creating a correlation plot
corrplot(plant_car,
         # change the shape of what's in the cells
         method = "ellipse",
         addCoef.col = "black"
         )

```

Create a plot of each variable compared against the others

```{r pairs-plot}
plant_subset |>
  select(species:num_phylls) |>
  ggpairs()

labs(caption = "hi")
```

Starting regression here:

(example) To determine how species and physiological characteristics predict biomass, we fit multiple linear modles.

```{r null-and-full-models}
null <- lm(totmass ~ 1, data = plant_subset)
full <- lm(totmass ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls,
           data = plant_subset)
```

We visually assess normality and homoskedasticity of residuals using diagnostic plots for the full model:

```{r full-diagnostics}
par(mfrow = c(2,2))
plot(full)

```

We also tested for normality using the Shapiro-Wilk test (null hypothesis: variable of interest (i.e. the residuals) are normally distributed)

We tested for heteroskedasticity using the...

```{r}
check_normality(full)
check_heteroscedasticity(full)
```

```{r}
null_log <- lm(log(totmass)~1, data = plant_subset)
full_log <- lm(totmass ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls,
           data = plant_subset)

plot(full_log)
check_normality(full_log)
check_heteroscedasticity(full_log)
```
Evaluate multicollinearity:
```{r }
car::vif(full_log)
```

We evaluated multicollinearity by calculating generalized varianve inflation factor and determined that...

try some more models:
 addressing the question: what set of predictor variables best predics the response

Compare models using Akaike's Information Criterion (AIC) values:
```{r}
model2_log <- lm(log(totmass) ~ species, data = plant_subset)
par(mfrow = c(2,2))
plot(model2_log)

check_normality(model2_log)
check_heteroskedasticity(model2_log)

AICc(full_log)
AICc(model2_log)
AICc(null_log)
```

```{r}
MuMIn::AICc(full_log, model2_log, null_log)
MuMIn::model.sel(full_log, model2_log, null_log)
```
```{r}
summary(full_log)

table <- tidy(full_log, conf.int = TRUE) |> #most useful when thinking about numerical predictors 
  #change the p-value if theyre really small
  #change the estimates, standard error, and t-statistics
  #using mutuate
  # make it into a flexttable
  flextable() |>
  #fit it to the viewer
  autofit

table
```

#Results
We found that the ____ model including ___ ____ ___ predictors best predictsed _____ (model summary).

use ggpredict to backtransform estimates
```{r}
model_pred <- ggpredict(full_log, terms = "species", back.transform = TRUE)

plot(ggpredict(full_log, terms = "species", back.transform = TRUE), add.data = TRUE)
plot(ggpredict(full_log, terms = "chlorophyll", back.transform = TRUE), add.data = TRUE)
plot(ggpredict(full_log, terms = "sla", back.transform = TRUE), add.data = TRUE)

model_pred

plot(model_pred, add.data = TRUE)
#bars are 99% confidence intervals
#jittered points are original data
```

#different types of anovas

```{r}

```

